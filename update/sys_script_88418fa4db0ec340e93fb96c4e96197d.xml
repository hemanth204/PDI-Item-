<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_rtp_sv_pdi_mclane_table</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>PDI_Mclane_Store_Update</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
//current.stores = '';
var stores = [];
var type = current.store_selection.toString(); // Add type here or whatever var you are using
	//gs.info("Store 1 type:::" +type);
 
var typeSysIDs = []; // Get this from the selected values
 
switch (type) {
    case 'region':
		typeSysIDs = current.region.split(",");
		gs.info("Store 2 typeSysIDs:::" +typeSysIDs[0]);
		getStoresByRegions(typeSysIDs);
        break;
    case 'area':
		typeSysIDs = current.area.split(",");
        getStoresByAreas(typeSysIDs);
        break;
    case 'all_stores':
        getAllStores();
        break;
	default:
        // Just use the stores that the user selected
		gs.info("Store 233 type:::" +type);
}
 

//current.stores = stores.toString();
	

// Get all the child areas for each selected region
// Pass the areas to function to populate stores
function getStoresByRegions(typeSysIDs){
    var childAreas = [];
    // Loop through each selected region's and get their areas
    for(var i = 0; i < typeSysIDs.length; i++){
        var regionsAreas = new GlideRecord('cmn_location');
        regionsAreas.addQuery('parent', typeSysIDs[i]);
        regionsAreas.query();
        while (regionsAreas.next()) {
            // Add child area to array
			current.stores = stores.toString();
            childAreas.push(regionsAreas.sys_id.toString());
			gs.info("Store 3 SYS_ID ::::"+regionsAreas.sys_id);
			//gs.addInfoMessage("store "+regionsAreas.sys_id);
        }
    }
	
 
    // Get the stores that belong to that area
    getStoresByAreas(childAreas);
}
 

// Get all the child stores for each area
// Populate store array
function getStoresByAreas(areaSysIds){
    // Loop through each selected region
    for(var i = 0; i < areaSysIds.length; i++){
        var areaStores = new GlideRecord('cmn_location');
        areaStores.addQuery('parent', areaSysIds[i]);
        areaStores.query();
        while (areaStores.next()) {
            // Loop through each area's stores and add them to the global array
			current.stores = stores.toString();
            stores.push(areaStores.sys_id.toString());
			gs.info("Store 255 type:::" +areaStores.sys_id);
        }
    }
}
 

// Gets all locations where type = store
function getAllStores(){
  var allStores = new GlideRecord('cmn_location');
  allStores.addQuery('u_type','Store');
	 gs.info("stores;;;;",+allStores.sys_id); 
  allStores.query();
	
  while (allStores.next()) {
	  //current.stores = stores.toString();
	  stores.push(allStores.sys_id.toString());
	  gs.info("stores;;;;",+allStores.sys_id); 
	 
	 // gs.info("stores",+allStores.sys_id);
  }
	current.stores = stores.toString();
}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>v-hemanthsiramdasu</sys_created_by>
        <sys_created_on>2017-10-23 15:40:42</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>88418fa4db0ec340e93fb96c4e96197d</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>PDI_Mclane_Store_Update</sys_name>
        <sys_overrides/>
        <sys_package display_value="PDI Item Management" source="x_rtp_sv_pdi">6b04b582dbc88740e93fb96c4e9619db</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PDI Item Management">6b04b582dbc88740e93fb96c4e9619db</sys_scope>
        <sys_update_name>sys_script_88418fa4db0ec340e93fb96c4e96197d</sys_update_name>
        <sys_updated_by>v-kannadhasanamirtha</sys_updated_by>
        <sys_updated_on>2018-01-04 16:03:04</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=88418fa4db0ec340e93fb96c4e96197d"/>
</record_update>
